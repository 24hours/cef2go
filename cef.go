//generated by: python cef_parser.py --go_file=../cef.go --c_file=../cef.c --h_file=cef.h --h_path=../ main.h -I../ 
package chrome 

/*
#cgo CFLAGS: -I./
#include <stdlib.h>
#include "cef_base.h"
#include "cef.h" 
#include "include/capi/cef_app_capi.h"
#include "include/capi/cef_client_capi.h"
#include "include/capi/cef_browser_capi.h"
*/
import "C"
import (
		"unsafe"
)

var AppMap = make(map[unsafe.Pointer]App)

type AppT struct{
	CStruct		*C.cef_app_t
}

func NewAppT(handler App) AppT {
	var ret AppT
	ret.CStruct = (*C.cef_app_t)(C.calloc(1, C.sizeof_cef_app_t))
	C.initializecef_app(ret.CStruct)
	handler.SetAppT(ret)
	AppMap[unsafe.Pointer(ret.CStruct)] = handler
	return ret
}
//Generate by DumpCgoInitializer 


type App interface{
	 GetAppT() AppT 
	 SetAppT(AppT) 
	 OnBeforeCommandLineProcessing(process_type interface{}, command_line interface{})  
	 OnRegisterCustomSchemes(registrar interface{})  
	 GetResourceBundleHandler() interface{} 
	 GetBrowserProcessHandler() interface{} 
	 GetRenderProcessHandler() interface{} 
}
//Generate by DumpGoInterface 

//export go_OnBeforeCommandLineProcessing
func go_OnBeforeCommandLineProcessing (self *C.struct__cef_app_t, process_type *C.cef_string_t, command_line *C.struct__cef_command_line_t)  {
	if handler, ok := AppMap[unsafe.Pointer(self)]; ok {
		//processing cef_string_t process_type 
		//processing _cef_command_line_t command_line 
	handler.OnBeforeCommandLineProcessing(process_type,command_line)
	}
	
}
//Generate by DumpGoCallBackFunction 

//export go_OnRegisterCustomSchemes
func go_OnRegisterCustomSchemes (self *C.struct__cef_app_t, registrar *C.struct__cef_scheme_registrar_t)  {
	if handler, ok := AppMap[unsafe.Pointer(self)]; ok {
		//processing _cef_scheme_registrar_t registrar 
	handler.OnRegisterCustomSchemes(registrar)
	}
	
}
//Generate by DumpGoCallBackFunction 

//export go_GetResourceBundleHandler
func go_GetResourceBundleHandler (self *C.cef_app_t) *C.struct__cef_resource_bundle_handler_t{
	if handler, ok := AppMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetResourceBundleHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetBrowserProcessHandler
func go_GetBrowserProcessHandler (self *C.cef_app_t) *C.struct__cef_browser_process_handler_t{
	if handler, ok := AppMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetBrowserProcessHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetRenderProcessHandler
func go_GetRenderProcessHandler (self *C.cef_app_t) *C.struct__cef_render_process_handler_t{
	if handler, ok := AppMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetRenderProcessHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

var ClientMap = make(map[unsafe.Pointer]Client)

type ClientT struct{
	CStruct		*C.cef_client_t
}

func NewClientT(handler Client) ClientT {
	var ret ClientT
	ret.CStruct = (*C.cef_client_t)(C.calloc(1, C.sizeof_cef_client_t))
	C.initializecef_client(ret.CStruct)
	handler.SetClientT(ret)
	ClientMap[unsafe.Pointer(ret.CStruct)] = handler
	return ret
}
//Generate by DumpCgoInitializer 


type Client interface{
	 GetClientT() ClientT 
	 SetClientT(ClientT) 
	 GetContextMenuHandler() interface{} 
	 GetDialogHandler() interface{} 
	 GetDisplayHandler() interface{} 
	 GetDownloadHandler() interface{} 
	 GetDragHandler() interface{} 
	 GetFocusHandler() interface{} 
	 GetGeolocationHandler() interface{} 
	 GetJsdialogHandler() interface{} 
	 GetKeyboardHandler() interface{} 
	 GetLifeSpanHandler() interface{} 
	 GetLoadHandler() interface{} 
	 GetRenderHandler() interface{} 
	 GetRequestHandler() interface{} 
	 OnProcessMessageReceived(browser interface{}, source_process interface{}, message interface{}) int 
}
//Generate by DumpGoInterface 

//export go_GetContextMenuHandler
func go_GetContextMenuHandler (self *C.cef_client_t) *C.struct__cef_context_menu_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetContextMenuHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetDialogHandler
func go_GetDialogHandler (self *C.cef_client_t) *C.struct__cef_dialog_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetDialogHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetDisplayHandler
func go_GetDisplayHandler (self *C.cef_client_t) *C.struct__cef_display_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetDisplayHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetDownloadHandler
func go_GetDownloadHandler (self *C.cef_client_t) *C.struct__cef_download_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetDownloadHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetDragHandler
func go_GetDragHandler (self *C.cef_client_t) *C.struct__cef_drag_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetDragHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetFocusHandler
func go_GetFocusHandler (self *C.cef_client_t) *C.struct__cef_focus_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetFocusHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetGeolocationHandler
func go_GetGeolocationHandler (self *C.cef_client_t) *C.struct__cef_geolocation_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetGeolocationHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetJsdialogHandler
func go_GetJsdialogHandler (self *C.cef_client_t) *C.struct__cef_jsdialog_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetJsdialogHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetKeyboardHandler
func go_GetKeyboardHandler (self *C.cef_client_t) *C.struct__cef_keyboard_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetKeyboardHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetLifeSpanHandler
func go_GetLifeSpanHandler (self *C.cef_client_t) *C.struct__cef_life_span_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetLifeSpanHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetLoadHandler
func go_GetLoadHandler (self *C.cef_client_t) *C.struct__cef_load_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetLoadHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetRenderHandler
func go_GetRenderHandler (self *C.cef_client_t) *C.struct__cef_render_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetRenderHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_GetRequestHandler
func go_GetRequestHandler (self *C.cef_client_t) *C.struct__cef_request_handler_t{
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		ret := handler.GetRequestHandler()
		if ret != nil{
			return nil
		}
	}
	return nil
}
//Generate by DumpGoGetterFunctions 

//export go_OnProcessMessageReceived
func go_OnProcessMessageReceived (self *C.struct__cef_client_t, browser *C.struct__cef_browser_t, source_process *C.cef_process_id_t, message *C.struct__cef_process_message_t) int {
	if handler, ok := ClientMap[unsafe.Pointer(self)]; ok {
		//processing _cef_browser_t browser 
		//processing cef_process_id_t source_process 
		//processing _cef_process_message_t message 
	 return handler.OnProcessMessageReceived(browser,source_process,message)
	}
	return 1;
}
//Generate by DumpGoCallBackFunction 

